!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AR.host	build/Makefile	/^AR.host ?= ar$/;"	m
AR.target	build/Makefile	/^AR.target ?= $(AR)$/;"	m
BUILDTYPE	build/Makefile	/^BUILDTYPE ?= Release$/;"	m
CC	Makefile	/^CC :=g++$/;"	m
CC	libpatlamp/Makefile	/^CC :=g++$/;"	m
CC.host	build/Makefile	/^CC.host ?= gcc$/;"	m
CC.target	build/Makefile	/^CC.target ?= $(CC)$/;"	m
CFLAGS	Makefile	/^CFLAGS :=`pkg-config opencv --cflags` `pkg-config opencv --libs`$/;"	m
CFLAGS	libpatlamp/Makefile	/^CFLAGS :=`pkg-config opencv --cflags` `pkg-config opencv --libs`$/;"	m
CFLAGS.host	build/Makefile	/^CFLAGS.host ?=$/;"	m
CFLAGS.target	build/Makefile	/^CFLAGS.target ?= $(CFLAGS)$/;"	m
CFLAGS_CC_Debug	build/patlamp_wrap.target.mk	/^CFLAGS_CC_Debug := \\$/;"	m
CFLAGS_CC_Release	build/patlamp_wrap.target.mk	/^CFLAGS_CC_Release := \\$/;"	m
CFLAGS_C_Debug	build/patlamp_wrap.target.mk	/^CFLAGS_C_Debug :=$/;"	m
CFLAGS_C_Release	build/patlamp_wrap.target.mk	/^CFLAGS_C_Release :=$/;"	m
CFLAGS_Debug	build/patlamp_wrap.target.mk	/^CFLAGS_Debug := \\$/;"	m
CFLAGS_Release	build/patlamp_wrap.target.mk	/^CFLAGS_Release := \\$/;"	m
CXX.host	build/Makefile	/^CXX.host ?= g++$/;"	m
CXX.target	build/Makefile	/^CXX.target ?= $(CXX)$/;"	m
CXXFLAGS.host	build/Makefile	/^CXXFLAGS.host ?=$/;"	m
CXXFLAGS.target	build/Makefile	/^CXXFLAGS.target ?= $(CXXFLAGS) $(CPPFLAGS)$/;"	m
DEFS_Debug	build/patlamp_wrap.target.mk	/^DEFS_Debug := \\$/;"	m
DEFS_Release	build/patlamp_wrap.target.mk	/^DEFS_Release := \\$/;"	m
DEPFLAGS	build/Makefile	/^DEPFLAGS = -MMD -MF $(depfile).raw$/;"	m
EXECUTABLE	Makefile	/^EXECUTABLE :=$(SOURCES:.cpp=)$/;"	m
EXECUTABLE	libpatlamp/Makefile	/^EXECUTABLE :=$(SOURCES:.cpp=)$/;"	m
GYP_CFLAGS	build/patlamp_wrap.target.mk	/^$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))$/;"	m
GYP_CXXFLAGS	build/patlamp_wrap.target.mk	/^$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))$/;"	m
GYP_LDFLAGS	build/patlamp_wrap.target.mk	/^$(obj).target\/patlamp_wrap.node: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))$/;"	m
IMAGE_SIZE	libpatlamp/dylibpatlamp.cpp	/^	struct IMAGE_SIZE {$/;"	s	namespace:patlamp	file:
INCS_Debug	build/patlamp_wrap.target.mk	/^INCS_Debug := \\$/;"	m
INCS_Release	build/patlamp_wrap.target.mk	/^INCS_Release := \\$/;"	m
IplImage	libpatlamp/RaspiCamCV.h	/^typedef struct _IplImage IplImage;$/;"	t	typeref:struct:_IplImage
LDFLAGS	Makefile	/^LDFLAGS :=$/;"	m
LDFLAGS	libpatlamp/Makefile	/^LDFLAGS :=$/;"	m
LDFLAGS.host	build/Makefile	/^LDFLAGS.host ?=$/;"	m
LDFLAGS.target	build/Makefile	/^LDFLAGS.target ?= $(LDFLAGS)$/;"	m
LDFLAGS_Debug	build/patlamp_wrap.target.mk	/^LDFLAGS_Debug := \\$/;"	m
LDFLAGS_Release	build/patlamp_wrap.target.mk	/^LDFLAGS_Release := \\$/;"	m
LIB	Makefile	/^LIB := -L . libraspicamcv.a -llazurite -L ~\/git\/raspberrypi\/userland\/build\/lib -lmmal_core -lmmal -lmmal_util -lvcos -lbcm_host$/;"	m
LIB	libpatlamp/Makefile	/^LIB := -L . libraspicamcv.a -llazurite -L ~\/git\/raspberrypi\/userland\/build\/lib -lmmal_core -lmmal -lmmal_util -lvcos -lbcm_host$/;"	m
LIBS	build/patlamp_wrap.target.mk	/^$(obj).target\/patlamp_wrap.node: LIBS := $(LIBS)$/;"	m
LIBS	build/patlamp_wrap.target.mk	/^LIBS :=$/;"	m
LINK	build/Makefile	/^LINK ?= flock $(builddir)\/linker.lock $(CXX.target)$/;"	m
LINK.host	build/Makefile	/^LINK.host ?= $(CXX.host)$/;"	m
LINK.target	build/Makefile	/^LINK.target ?= $(LINK)$/;"	m
MACHINE_MAP	libpatlamp/dylibpatlamp.cpp	/^	} MACHINE_MAP;$/;"	t	namespace:patlamp	typeref:struct:patlamp::__anon5	file:
MAKEFLAGS	build/Makefile	/^MAKEFLAGS=-r$/;"	m
MOUSE_POINTER	libpatlamp/dylibpatlamp.cpp	/^	struct MOUSE_POINTER{$/;"	s	namespace:patlamp	file:
OBJS	build/patlamp_wrap.target.mk	/^OBJS := \\$/;"	m
PATLAMP_LIB	patlamp_wrap.cc	/^struct PATLAMP_LIB {$/;"	s	file:
RASPIVID_CONFIG	libpatlamp/RaspiCamCV.h	/^} RASPIVID_CONFIG;$/;"	t	typeref:struct:__anon1
RASPIVID_STATE	libpatlamp/RaspiCamCV.h	/^typedef struct _RASPIVID_STATE RASPIVID_STATE;$/;"	t	typeref:struct:_RASPIVID_STATE
RPI_CAP_PROP_BITRATE	libpatlamp/RaspiCamCV.h	/^    RPI_CAP_PROP_BITRATE		=37   \/\/ no natural mapping here - used CV_CAP_PROP_SETTINGS$/;"	e	enum:__anon3
RPI_CAP_PROP_FPS	libpatlamp/RaspiCamCV.h	/^    RPI_CAP_PROP_FPS            =5,$/;"	e	enum:__anon3
RPI_CAP_PROP_FRAME_HEIGHT	libpatlamp/RaspiCamCV.h	/^    RPI_CAP_PROP_FRAME_HEIGHT   =4,$/;"	e	enum:__anon3
RPI_CAP_PROP_FRAME_WIDTH	libpatlamp/RaspiCamCV.h	/^    RPI_CAP_PROP_FRAME_WIDTH    =3,$/;"	e	enum:__anon3
RPI_CAP_PROP_MONOCHROME	libpatlamp/RaspiCamCV.h	/^    RPI_CAP_PROP_MONOCHROME		=19,$/;"	e	enum:__anon3
RaspiCamCvCapture	libpatlamp/RaspiCamCV.h	/^} RaspiCamCvCapture;$/;"	t	typeref:struct:__anon2
SOURCES	Makefile	/^SOURCES :=$(wildcard *.cpp)$/;"	m
SOURCES	libpatlamp/Makefile	/^SOURCES :=$(wildcard *.cpp)$/;"	m
TARGET	build/patlamp_wrap.target.mk	/^TARGET := patlamp_wrap$/;"	m
TEXT_COLOR	libpatlamp/dylibpatlamp.cpp	/^	struct TEXT_COLOR {$/;"	s	namespace:patlamp	file:
TOOLSET	build/Makefile	/^TOOLSET := target$/;"	m
TOOLSET	build/patlamp_wrap.target.mk	/^$(OBJS): TOOLSET := $(TOOLSET)$/;"	m
TOOLSET	build/patlamp_wrap.target.mk	/^$(builddir)\/patlamp_wrap.node: TOOLSET := $(TOOLSET)$/;"	m
TOOLSET	build/patlamp_wrap.target.mk	/^$(obj).target\/patlamp_wrap.node: TOOLSET := $(TOOLSET)$/;"	m
TOOLSET	build/patlamp_wrap.target.mk	/^TOOLSET := target$/;"	m
Warn	patlamp.js	/^	function Warn(message){$/;"	f	function:module.exports
_LIBLAMPDETECT_H_	libpatlamp/libpatlamp.h	2;"	d
__RaspiCamCV__	libpatlamp/RaspiCamCV.h	2;"	d
abs_builddir	build/Makefile	/^abs_builddir := $(abspath $(builddir))$/;"	m
abs_obj	build/Makefile	/^abs_obj := $(abspath $(obj))$/;"	m
abs_srcdir	build/Makefile	/^abs_srcdir := $(abspath $(srcdir))$/;"	m
all_deps	build/Makefile	/^all_deps :=$/;"	m
b	libpatlamp/dylibpatlamp.cpp	/^		uint8_t b;$/;"	m	struct:patlamp::__anon4	file:
b	libpatlamp/dylibpatlamp.cpp	/^		unsigned char b;$/;"	m	struct:patlamp::TEXT_COLOR	file:
bitrate	libpatlamp/RaspiCamCV.h	/^	int bitrate;            $/;"	m	struct:__anon1
builddir	build/Makefile	/^builddir ?= $(builddir_name)\/$(BUILDTYPE)$/;"	m
builddir_name	build/Makefile	/^builddir_name ?= .$/;"	m
cmd_alink	build/Makefile	/^cmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)$/;"	m
cmd_alink_thin	build/Makefile	/^cmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)$/;"	m
cmd_cc	build/Makefile	/^cmd_cc = $(CC.$(TOOLSET)) $(GYP_CFLAGS) $(DEPFLAGS) $(CFLAGS.$(TOOLSET)) -c -o $@ $<$/;"	m
cmd_copy	build/Makefile	/^cmd_copy = ln -f "$<" "$@" 2>\/dev\/null || (rm -rf "$@" && cp -af "$<" "$@")$/;"	m
cmd_cxx	build/Makefile	/^cmd_cxx = $(CXX.$(TOOLSET)) $(GYP_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<$/;"	m
cmd_link	build/Makefile	/^cmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)$/;"	m
cmd_regen_makefile	build/Makefile	/^cmd_regen_makefile = cd $(srcdir); \/usr\/share\/node-gyp\/gyp\/gyp_main.py -fmake --ignore-environment "--toplevel-dir=." -I\/home\/pi\/.node-red\/node_modules\/node-red-contrib-patlamp\/build\/config.gypi -I\/usr\/share\/node-gyp\/addon.gypi -I\/usr\/include\/nodejs\/common.gypi "--depth=." "-Goutput_dir=." "--generator-output=build" "-Dlibrary=shared_library" "-Dvisibility=default" "-Dnode_root_dir=\/usr\/include\/nodejs" "-Dmodule_root_dir=\/home\/pi\/.node-red\/node_modules\/node-red-contrib-patlamp" binding.gyp$/;"	m
cmd_solink	build/Makefile	/^cmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)$/;"	m
cmd_solink_module	build/Makefile	/^cmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)$/;"	m
cmd_touch	build/Makefile	/^cmd_touch = touch $@$/;"	m
color	libpatlamp/dylibpatlamp.cpp	/^		std::string color;$/;"	m	struct:patlamp::__anon5	file:
color_table	libpatlamp/dylibpatlamp.cpp	/^	} color_table;$/;"	t	namespace:patlamp	typeref:struct:patlamp::__anon4	file:
command_changed	build/Makefile	/^command_changed = $(or $(subst $(cmd_$(1)),,$(cmd_$(call replace_spaces,$@))),\\$/;"	m
connect	patlamp.js	/^	function connect(node) {$/;"	f	function:module.exports
cycle_count	libpatlamp/dylibpatlamp.cpp	/^	int cycle_count;$/;"	m	namespace:patlamp	file:
d_files	build/Makefile	/^d_files := $(wildcard $(foreach f,$(all_deps),$(depsdir)\/$(f).d))$/;"	m
depfile	build/Makefile	/^depfile = $(depsdir)\/$(call replace_spaces,$@).d$/;"	m
depsdir	build/Makefile	/^depsdir := $(builddir)\/.deps$/;"	m
detectInterval	libpatlamp/dylibpatlamp.cpp	/^	int detectInterval = 500;			\/\/ imaging capture interval$/;"	m	namespace:patlamp	file:
detected_count	libpatlamp/dylibpatlamp.cpp	/^	int detected_count[128];$/;"	m	namespace:patlamp	file:
dirx	build/Makefile	/^dirx = $(call unreplace_spaces,$(dir $(call replace_spaces,$1)))$/;"	m
disconnect	patlamp.js	/^	function disconnect(node) {$/;"	f	function:module.exports
dispOrigin	libpatlamp/dylibpatlamp.cpp	/^	} imgSize = {640,480},dispOrigin;$/;"	m	namespace:patlamp	typeref:struct:patlamp::IMAGE_SIZE	file:
dlclose	patlamp_wrap.cc	/^Handle<Value> dlclose(const Arguments& args) {$/;"	f
dlopen	patlamp_wrap.cc	/^Handle<Value> dlopen(const Arguments& args) {$/;"	f
do_cmd	build/Makefile	/^define do_cmd$/;"	m
do_postbuilds	build/Makefile	/^define do_postbuilds$/;"	m
empty	build/Makefile	/^empty :=$/;"	m
enbDisp	libpatlamp/dylibpatlamp.cpp	/^	bool enbDisp = false;				\/\/ display status$/;"	m	namespace:patlamp	file:
escape_quotes	build/Makefile	/^escape_quotes = $(subst ','\\'',$(1))$/;"	m
escape_vars	build/Makefile	/^escape_vars = $(subst $$,$$$$,$(1))$/;"	m
exact_echo	build/Makefile	/^exact_echo = printf '%s\\n' '$(call escape_quotes,$(1))'$/;"	m
expandMag	libpatlamp/dylibpatlamp.cpp	/^	int expandMag = 4;				\/\/ expand display$/;"	m	namespace:patlamp	file:
expandPosition	libpatlamp/dylibpatlamp.cpp	/^	expandPosition = {0,0};$/;"	m	namespace:patlamp	typeref:struct:patlamp::MOUSE_POINTER	file:
find	patlamp_wrap.cc	/^funcptr find(void* handle, const char * name) {$/;"	f
fixup_dep	build/Makefile	/^define fixup_dep$/;"	m
framerate	libpatlamp/RaspiCamCV.h	/^	int framerate;          $/;"	m	struct:__anon1
funcptr	patlamp_wrap.cc	/^typedef void (*funcptr)(void);$/;"	t	file:
g	libpatlamp/dylibpatlamp.cpp	/^		uint8_t g;$/;"	m	struct:patlamp::__anon4	file:
g	libpatlamp/dylibpatlamp.cpp	/^		unsigned char g;$/;"	m	struct:patlamp::TEXT_COLOR	file:
getDisplay	libpatlamp/dylibpatlamp.cpp	/^	extern "C" bool getDisplay(void) {$/;"	f	namespace:patlamp
getDisplay	patlamp_wrap.cc	/^	bool (*getDisplay)();$/;"	m	struct:PATLAMP_LIB	file:
handle	patlamp_wrap.cc	/^void *handle;$/;"	v
height	libpatlamp/RaspiCamCV.h	/^	int height;             $/;"	m	struct:__anon1
height	libpatlamp/dylibpatlamp.cpp	/^		int height;$/;"	m	struct:patlamp::IMAGE_SIZE	file:
imgSize	libpatlamp/dylibpatlamp.cpp	/^	} imgSize = {640,480},dispOrigin;$/;"	m	namespace:patlamp	typeref:struct:patlamp::IMAGE_SIZE	file:
imgfile	libpatlamp/dylibpatlamp.cpp	/^	std::string imgfile = "";			\/\/ jpeg file name for snapshot$/;"	m	namespace:patlamp	file:
init	libpatlamp/dylibpatlamp.cpp	/^	extern "C" int init(void) {$/;"	f	namespace:patlamp
init	patlamp_wrap.cc	/^	int (*init)(void);$/;"	m	struct:PATLAMP_LIB	file:
initialized	patlamp_wrap.cc	/^bool initialized = false;$/;"	v
lib	patlamp_wrap.cc	/^} lib;$/;"	v	typeref:struct:PATLAMP_LIB
load_mapfile	libpatlamp/dylibpatlamp.cpp	/^	void load_mapfile()$/;"	f	namespace:patlamp
main	test.cpp	/^int main(void)$/;"	f
main_thread	libpatlamp/dylibpatlamp.cpp	/^	static void*  main_thread(void *args)$/;"	f	namespace:patlamp
mapfile	libpatlamp/dylibpatlamp.cpp	/^	std::string mapfile = "";			\/\/ map file name$/;"	m	namespace:patlamp	file:
module.exports	patlamp.js	/^module.exports = function(RED) {$/;"	f
monochrome	libpatlamp/RaspiCamCV.h	/^	int monochrome;			$/;"	m	struct:__anon1
mouse	libpatlamp/dylibpatlamp.cpp	/^	} mouse ={0,0},$/;"	m	namespace:patlamp	typeref:struct:patlamp::MOUSE_POINTER	file:
mutex	libpatlamp/dylibpatlamp.cpp	/^	pthread_mutex_t mutex;				\/\/ thread muteix$/;"	m	namespace:patlamp	file:
name	libpatlamp/dylibpatlamp.cpp	/^		std::string name;$/;"	m	struct:patlamp::__anon5	file:
node_init	patlamp_wrap.cc	/^void node_init(Handle<Object> target) {$/;"	f
obj	build/Makefile	/^obj := $(builddir)\/obj$/;"	m
onCamera	libpatlamp/dylibpatlamp.cpp	/^	bool onCamera = false;			\/\/ trigger of imaging picture$/;"	m	namespace:patlamp	file:
onExecute	libpatlamp/dylibpatlamp.cpp	/^	bool onExecute = false;			\/\/ trigger of imaging picture$/;"	m	namespace:patlamp	file:
onExpand	libpatlamp/dylibpatlamp.cpp	/^	bool onExpand = false;				\/\/ display status$/;"	m	namespace:patlamp	file:
onImage	libpatlamp/dylibpatlamp.cpp	/^	bool onImage = false;				\/\/ trigger of diplay image$/;"	m	namespace:patlamp	file:
onImageWrite	libpatlamp/dylibpatlamp.cpp	/^	bool onImageWrite = false;			\/\/ trigger of imaging picture$/;"	m	namespace:patlamp	file:
on_mouse	libpatlamp/dylibpatlamp.cpp	/^	static void on_mouse(int event,int x, int y,int flags,void *param=NULL){$/;"	f	namespace:patlamp
opened	patlamp_wrap.cc	/^bool opened = false;$/;"	v
output_valid	libpatlamp/dylibpatlamp.cpp	/^	bool output_valid=false;$/;"	m	namespace:patlamp	file:
pState	libpatlamp/RaspiCamCV.h	/^	RASPIVID_STATE * pState;$/;"	m	struct:__anon2
pat_ramp	libpatlamp/dylibpatlamp.cpp	/^	vector <MACHINE_MAP> pat_ramp;$/;"	m	namespace:patlamp	file:
patlamp	libpatlamp/dylibpatlamp.cpp	/^namespace patlamp$/;"	n	file:
patlamp	libpatlamp/libpatlamp.h	/^namespace patlamp {$/;"	n
patlamp_cam	patlamp.js	/^	function patlamp_cam(config) {$/;"	c	class:module.exports
patlamp_csv	patlamp.js	/^	function patlamp_csv(config) {$/;"	c	class:module.exports
patlamp_getDisplay	patlamp_wrap.cc	/^Handle<Value> patlamp_getDisplay(const Arguments& args) {$/;"	f
patlamp_init	patlamp.js	/^	function patlamp_init(node) {$/;"	f	function:module.exports
patlamp_init	patlamp_wrap.cc	/^Handle<Value> patlamp_init(const Arguments& args) {$/;"	f
patlamp_open	patlamp.js	/^	function patlamp_open() {$/;"	f	function:module.exports
patlamp_photo	patlamp.js	/^	function patlamp_photo(config) {$/;"	c	class:module.exports
patlamp_readData	patlamp_wrap.cc	/^Handle<Value> patlamp_readData(const Arguments& args) {$/;"	f
patlamp_remove	patlamp_wrap.cc	/^Handle<Value> patlamp_remove(const Arguments& args) {$/;"	f
patlamp_setDetectInterval	patlamp_wrap.cc	/^Handle<Value> patlamp_setDetectInterval(const Arguments& args) {$/;"	f
patlamp_setDisplay	patlamp_wrap.cc	/^Handle<Value> patlamp_setDisplay(const Arguments& args) {$/;"	f
patlamp_setExpandMag	patlamp_wrap.cc	/^Handle<Value> patlamp_setExpandMag(const Arguments& args) {$/;"	f
patlamp_setMapfile	patlamp_wrap.cc	/^Handle<Value> patlamp_setMapfile(const Arguments& args) {$/;"	f
patlamp_setReportInterval	patlamp_wrap.cc	/^Handle<Value> patlamp_setReportInterval(const Arguments& args) {$/;"	f
patlamp_setTextColor	patlamp_wrap.cc	/^Handle<Value> patlamp_setTextColor(const Arguments& args) {$/;"	f
patlamp_snapShot	patlamp_wrap.cc	/^Handle<Value> patlamp_snapShot(const Arguments& args) {$/;"	f
prereq_changed	build/Makefile	/^prereq_changed = $(filter-out FORCE_DO_CMD,$(filter-out $|,$?))$/;"	m
quiet	build/Makefile	/^  quiet=$/;"	m
quiet	build/Makefile	/^  quiet=quiet_$/;"	m
quiet_cmd_alink	build/Makefile	/^quiet_cmd_alink = AR($(TOOLSET)) $@$/;"	m
quiet_cmd_alink_thin	build/Makefile	/^quiet_cmd_alink_thin = AR($(TOOLSET)) $@$/;"	m
quiet_cmd_cc	build/Makefile	/^quiet_cmd_cc = CC($(TOOLSET)) $@$/;"	m
quiet_cmd_copy	build/Makefile	/^quiet_cmd_copy = COPY $@$/;"	m
quiet_cmd_cxx	build/Makefile	/^quiet_cmd_cxx = CXX($(TOOLSET)) $@$/;"	m
quiet_cmd_link	build/Makefile	/^quiet_cmd_link = LINK($(TOOLSET)) $@$/;"	m
quiet_cmd_regen_makefile	build/Makefile	/^quiet_cmd_regen_makefile = ACTION Regenerating $@$/;"	m
quiet_cmd_solink	build/Makefile	/^quiet_cmd_solink = SOLINK($(TOOLSET)) $@$/;"	m
quiet_cmd_solink_module	build/Makefile	/^quiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@$/;"	m
quiet_cmd_touch	build/Makefile	/^quiet_cmd_touch = TOUCH $@$/;"	m
r	libpatlamp/dylibpatlamp.cpp	/^		uint8_t r;$/;"	m	struct:patlamp::__anon4	file:
r	libpatlamp/dylibpatlamp.cpp	/^		unsigned char r;$/;"	m	struct:patlamp::TEXT_COLOR	file:
ramp_count	libpatlamp/dylibpatlamp.cpp	/^	int ramp_count;$/;"	m	namespace:patlamp	file:
readData	libpatlamp/dylibpatlamp.cpp	/^	extern "C" bool readData(std::string &payload) {$/;"	f	namespace:patlamp
readData	patlamp_wrap.cc	/^	bool (*readData)(std::string &result);$/;"	m	struct:PATLAMP_LIB	file:
remove	libpatlamp/dylibpatlamp.cpp	/^	extern "C" int remove(void) {$/;"	f	namespace:patlamp
remove	patlamp_wrap.cc	/^	int (*remove)(void);$/;"	m	struct:PATLAMP_LIB	file:
replace_spaces	build/Makefile	/^replace_spaces = $(subst $(space),?,$1)$/;"	m
reportInterval	libpatlamp/dylibpatlamp.cpp	/^	int reportInterval = 10;			\/\/ report interval$/;"	m	namespace:patlamp	file:
rng	libpatlamp/dylibpatlamp.cpp	/^	RNG rng;$/;"	m	namespace:patlamp	file:
serchBlinking	libpatlamp/dylibpatlamp.cpp	/^	void serchBlinking(Mat grayImage, Mat &cameraFeed){$/;"	f	namespace:patlamp
setDetectInterval	libpatlamp/dylibpatlamp.cpp	/^	extern "C" int setDetectInterval(int msec) {$/;"	f	namespace:patlamp
setDetectInterval	patlamp_wrap.cc	/^	int (*setDetectInterval)(int msec);$/;"	m	struct:PATLAMP_LIB	file:
setDisplay	libpatlamp/dylibpatlamp.cpp	/^	extern "C" int setDisplay(bool on) {$/;"	f	namespace:patlamp
setDisplay	patlamp_wrap.cc	/^	int (*setDisplay)(bool on);$/;"	m	struct:PATLAMP_LIB	file:
setExpandMag	libpatlamp/dylibpatlamp.cpp	/^	extern "C" int setExpandMag(int mag) {$/;"	f	namespace:patlamp
setExpandMag	patlamp_wrap.cc	/^	int (*setExpandMag)(int mag);$/;"	m	struct:PATLAMP_LIB	file:
setMapfile	libpatlamp/dylibpatlamp.cpp	/^	extern "C" int setMapfile(std::string str) {$/;"	f	namespace:patlamp
setMapfile	patlamp_wrap.cc	/^	int (*setMapfile)(std::string str);$/;"	m	struct:PATLAMP_LIB	file:
setOutput	libpatlamp/dylibpatlamp.cpp	/^	void setOutput(void){$/;"	f	namespace:patlamp
setReportInterval	libpatlamp/dylibpatlamp.cpp	/^	extern "C" int setReportInterval(int sec) {$/;"	f	namespace:patlamp
setReportInterval	patlamp_wrap.cc	/^	int (*setReportInterval)(int sec);$/;"	m	struct:PATLAMP_LIB	file:
setTextColor	libpatlamp/dylibpatlamp.cpp	/^	extern "C" void setTextColor(unsigned char r,unsigned char g,unsigned char b) {$/;"	f	namespace:patlamp
setTextColor	patlamp_wrap.cc	/^	void (*setTextColor)(unsigned char r, unsigned char g, unsigned char b);$/;"	m	struct:PATLAMP_LIB	file:
size	libpatlamp/dylibpatlamp.cpp	/^		int size;$/;"	m	struct:patlamp::__anon5	file:
snapShot	libpatlamp/dylibpatlamp.cpp	/^	extern "C" void snapShot(std::string filepath) {$/;"	f	namespace:patlamp
snapShot	patlamp_wrap.cc	/^	void (*snapShot)(std::string filepath);$/;"	m	struct:PATLAMP_LIB	file:
space	build/Makefile	/^space := $(empty) $(empty)$/;"	m
srcdir	build/Makefile	/^srcdir := ..$/;"	m
textColor	libpatlamp/dylibpatlamp.cpp	/^	} textColor = {255,0,0};$/;"	m	namespace:patlamp	typeref:struct:patlamp::TEXT_COLOR	file:
thread_handler	libpatlamp/dylibpatlamp.cpp	/^	pthread_t thread_handler = 0;		\/\/ thread handler$/;"	m	namespace:patlamp	file:
threshold	libpatlamp/dylibpatlamp.cpp	/^		int threshold;$/;"	m	struct:patlamp::__anon5	file:
total_count	libpatlamp/dylibpatlamp.cpp	/^	int total_count=0;$/;"	m	namespace:patlamp	file:
total_detect	libpatlamp/dylibpatlamp.cpp	/^	int total_detect[128];$/;"	m	namespace:patlamp	file:
translate	patlamp.js	/^	function translate(value) {$/;"	f	function:module.exports
unreplace_spaces	build/Makefile	/^unreplace_spaces = $(subst ?,$(space),$1)$/;"	m
width	libpatlamp/RaspiCamCV.h	/^	int width;              $/;"	m	struct:__anon1
width	libpatlamp/dylibpatlamp.cpp	/^		int width;$/;"	m	struct:patlamp::IMAGE_SIZE	file:
x	libpatlamp/dylibpatlamp.cpp	/^		int x;$/;"	m	struct:patlamp::MOUSE_POINTER	file:
x	libpatlamp/dylibpatlamp.cpp	/^		int x;$/;"	m	struct:patlamp::__anon5	file:
y	libpatlamp/dylibpatlamp.cpp	/^		int y;$/;"	m	struct:patlamp::MOUSE_POINTER	file:
y	libpatlamp/dylibpatlamp.cpp	/^		int y;$/;"	m	struct:patlamp::__anon5	file:
